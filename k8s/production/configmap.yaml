apiVersion: v1
kind: ConfigMap
metadata:
  name: paradigm-config
  namespace: paradigm-mainnet
  labels:
    app.kubernetes.io/name: paradigm
    app.kubernetes.io/component: config
data:
  # Core node configuration
  node.toml: |
    [node]
    node_id = "paradigm-k8s-node"
    data_dir = "/data"
    log_level = "info"
    enable_metrics = true
    metrics_port = 9090

    [network]
    listen_port = 30303
    max_peers = 100
    discovery_enabled = true
    nat_enabled = true
    bootstrap_nodes = [
        "/ip4/seed1.paradigm.network/tcp/30303/p2p/QmBootstrapNode1",
        "/ip4/seed2.paradigm.network/tcp/30303/p2p/QmBootstrapNode2"
    ]

    [rpc]
    enabled = true
    host = "0.0.0.0"
    port = 8545
    cors_origins = ["*"]
    rate_limit = 1000

    [websocket]
    enabled = true
    host = "0.0.0.0"
    port = 8546
    max_connections = 1000

    [consensus]
    enable_ml_consensus = true
    ml_task_timeout = 300
    validator_timeout = 30
    block_time = 12

    [storage]
    database_url = "postgresql://paradigm:${POSTGRES_PASSWORD}@postgres:5432/paradigm"
    cache_size = "2GB"
    enable_pruning = true
    pruning_interval = 86400

    [cross_chain]
    ethereum_enabled = true
    ethereum_rpc = "${ETHEREUM_RPC_URL}"
    bitcoin_enabled = true
    bitcoin_rpc = "${BITCOIN_RPC_URL}"
    cosmos_enabled = true
    cosmos_rpc = "${COSMOS_RPC_URL}"

    [security]
    enable_tls = true
    cert_file = "/etc/ssl/certs/tls.crt"
    key_file = "/etc/ssl/private/tls.key"
    enable_firewall = true
    allowed_ips = ["0.0.0.0/0"]

  # Genesis configuration
  genesis.json: |
    {
      "chain_id": "paradigm-1",
      "network_id": "paradigm-mainnet-1",
      "genesis_time": "2024-01-01T00:00:00Z",
      "initial_validators": [
        {
          "address": "PAR1234567890abcdef1234567890abcdef12345678",
          "public_key": "0x...",
          "stake": "10000000000000000",
          "commission": "0.05"
        }
      ],
      "initial_accounts": [
        {
          "address": "PAR1111111111111111111111111111111111111111",
          "balance": "1000000000000000000"
        }
      ],
      "consensus_params": {
        "block_time": 12,
        "block_size_limit": 1048576,
        "gas_limit": 30000000,
        "min_validator_stake": "1000000000000000"
      },
      "governance_params": {
        "voting_period": 604800,
        "proposal_deposit": "100000000000000",
        "quorum": "0.334",
        "threshold": "0.5"
      },
      "tokenomics": {
        "total_supply": "8000000000000000000",
        "inflation_rate": "0.07",
        "staking_rewards": "0.05",
        "ml_rewards": "0.02"
      }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: paradigm-mainnet
  labels:
    app.kubernetes.io/name: paradigm
    app.kubernetes.io/component: nginx
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    worker_rlimit_nofile 65535;

    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;

    events {
        worker_connections 4096;
        use epoll;
        multi_accept on;
    }

    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'rt=$request_time uct="$upstream_connect_time" '
                        'uht="$upstream_header_time" urt="$upstream_response_time"';

        access_log /var/log/nginx/access.log main;

        # Basic settings
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 16M;

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css text/xml text/javascript application/javascript application/json;

        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=auth:10m rate=5r/s;

        # SSL configuration
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # Security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Load balancing
        upstream paradigm_api {
            least_conn;
            server paradigm-api:8080 weight=1 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }

        include /etc/nginx/conf.d/*.conf;
    }

  default.conf: |
    server {
        listen 80;
        server_name _;
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name paradigm.network *.paradigm.network;

        ssl_certificate /etc/ssl/certs/tls.crt;
        ssl_certificate_key /etc/ssl/private/tls.key;

        # API endpoints
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://paradigm_api;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # WebSocket endpoint
        location /ws {
            proxy_pass http://paradigm_api;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;
        }

        # Health check endpoint
        location /health {
            access_log off;
            proxy_pass http://paradigm_api;
            proxy_set_header Host $host;
        }

        # Static content and documentation
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: paradigm-mainnet
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'paradigm-k8s-mainnet'
        replica: '1'

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    alerting:
      alertmanagers:
        - kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names:
              - paradigm-mainnet
          relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: alertmanager

    scrape_configs:
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
          namespaces:
            names:
            - paradigm-mainnet
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__

      - job_name: 'kubernetes-services'
        kubernetes_sd_configs:
        - role: service
          namespaces:
            names:
            - paradigm-mainnet
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__

  rules.yml: |
    groups:
      - name: paradigm_alerts
        rules:
          - alert: ParadigmNodeDown
            expr: up{job="paradigm-core"} == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Paradigm node is down"
              description: "Paradigm core node has been down for more than 1 minute"

          - alert: HighCPUUsage
            expr: 100 - (avg by(instance) (rate(container_cpu_usage_seconds_total[5m])) * 100) > 80
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High CPU usage detected"
              description: "CPU usage is above 80% for more than 5 minutes"

          - alert: HighMemoryUsage
            expr: (container_memory_usage_bytes / container_spec_memory_limit_bytes) * 100 > 85
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High memory usage detected"
              description: "Memory usage is above 85% for more than 5 minutes"

          - alert: PodRestartingTooOften
            expr: rate(kube_pod_container_status_restarts_total[15m]) > 0
            for: 1m
            labels:
              severity: warning
            annotations:
              summary: "Pod is restarting too often"
              description: "Pod {{ $labels.pod }} is restarting too frequently"