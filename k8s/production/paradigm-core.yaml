apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: paradigm-core
  namespace: paradigm-mainnet
  labels:
    app.kubernetes.io/name: paradigm-core
    app.kubernetes.io/component: blockchain
    app.kubernetes.io/part-of: paradigm-network
    app.kubernetes.io/version: "1.0.0"
spec:
  serviceName: paradigm-core
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: paradigm-core
  template:
    metadata:
      labels:
        app.kubernetes.io/name: paradigm-core
        app.kubernetes.io/component: blockchain
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: paradigm-core
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: paradigm-core
        image: paradigm/core:latest
        imagePullPolicy: Always
        ports:
        - name: rpc
          containerPort: 8545
          protocol: TCP
        - name: p2p
          containerPort: 30303
          protocol: TCP
        - name: websocket
          containerPort: 8546
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: PARADIGM_NODE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PARADIGM_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: paradigm-secrets
              key: postgres-password
        - name: ETHEREUM_RPC_URL
          valueFrom:
            secretKeyRef:
              name: paradigm-secrets
              key: ethereum-rpc-url
        - name: BITCOIN_RPC_URL
          valueFrom:
            secretKeyRef:
              name: paradigm-secrets
              key: bitcoin-rpc-url
        - name: COSMOS_RPC_URL
          valueFrom:
            secretKeyRef:
              name: paradigm-secrets
              key: cosmos-rpc-url
        envFrom:
        - configMapRef:
            name: paradigm-env-config
        resources:
          requests:
            memory: "8Gi"
            cpu: "4"
            ephemeral-storage: "10Gi"
          limits:
            memory: "16Gi"
            cpu: "8"
            ephemeral-storage: "20Gi"
        volumeMounts:
        - name: data
          mountPath: /data
        - name: config
          mountPath: /config
          readOnly: true
        - name: ssl-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        - name: ssl-private
          mountPath: /etc/ssl/private
          readOnly: true
        - name: logs
          mountPath: /logs
        livenessProbe:
          httpGet:
            path: /health
            port: 8545
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8545
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8545
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: config
        configMap:
          name: paradigm-config
      - name: ssl-certs
        secret:
          secretName: paradigm-tls
          items:
          - key: tls.crt
            path: tls.crt
      - name: ssl-private
        secret:
          secretName: paradigm-tls
          items:
          - key: tls.key
            path: tls.key
          defaultMode: 0600
      - name: logs
        emptyDir: {}
      initContainers:
      - name: init-genesis
        image: paradigm/core:latest
        command: ['sh', '-c', 'paradigm-core init --genesis-file /config/genesis.json --data-dir /data']
        volumeMounts:
        - name: data
          mountPath: /data
        - name: config
          mountPath: /config
          readOnly: true
        resources:
          requests:
            memory: "1Gi"
            cpu: "0.5"
          limits:
            memory: "2Gi"
            cpu: "1"
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app.kubernetes.io/name: paradigm-core
        app.kubernetes.io/component: storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: "ssd-retain"
      resources:
        requests:
          storage: 500Gi

---
apiVersion: v1
kind: Service
metadata:
  name: paradigm-core
  namespace: paradigm-mainnet
  labels:
    app.kubernetes.io/name: paradigm-core
    app.kubernetes.io/component: blockchain
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: rpc
    port: 8545
    targetPort: 8545
    protocol: TCP
  - name: websocket
    port: 8546
    targetPort: 8546
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app.kubernetes.io/name: paradigm-core

---
apiVersion: v1
kind: Service
metadata:
  name: paradigm-core-p2p
  namespace: paradigm-mainnet
  labels:
    app.kubernetes.io/name: paradigm-core
    app.kubernetes.io/component: p2p
spec:
  type: LoadBalancer
  ports:
  - name: p2p
    port: 30303
    targetPort: 30303
    protocol: TCP
  selector:
    app.kubernetes.io/name: paradigm-core

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: paradigm-core
  namespace: paradigm-mainnet
  labels:
    app.kubernetes.io/name: paradigm-core

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: paradigm-mainnet
  name: paradigm-core-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: paradigm-core-rolebinding
  namespace: paradigm-mainnet
subjects:
- kind: ServiceAccount
  name: paradigm-core
  namespace: paradigm-mainnet
roleRef:
  kind: Role
  name: paradigm-core-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: paradigm-core-pdb
  namespace: paradigm-mainnet
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: paradigm-core

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: paradigm-env-config
  namespace: paradigm-mainnet
  labels:
    app.kubernetes.io/name: paradigm
    app.kubernetes.io/component: config
data:
  ENVIRONMENT: "production"
  NETWORK_ID: "paradigm-mainnet-1"
  CHAIN_ID: "paradigm-1"
  PARADIGM_RPC_PORT: "8545"
  PARADIGM_P2P_PORT: "30303"
  PARADIGM_WS_PORT: "8546"
  PARADIGM_METRICS_PORT: "9090"
  PARADIGM_DATA_DIR: "/data"
  PARADIGM_LOG_LEVEL: "info"
  DATABASE_URL: "postgresql://paradigm:$(POSTGRES_PASSWORD)@postgres:5432/paradigm"
  REDIS_URL: "redis://redis:6379/0"
  ENABLE_TLS: "true"
  TLS_CERT_PATH: "/etc/ssl/certs/tls.crt"
  TLS_KEY_PATH: "/etc/ssl/private/tls.key"
  MAX_PEERS: "100"
  CACHE_SIZE: "2GB"
  WORKER_THREADS: "8"
  ENABLE_METRICS: "true"
  METRICS_INTERVAL: "15"
  LOG_FORMAT: "json"
  LOG_OUTPUT: "stdout"