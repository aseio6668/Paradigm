apiVersion: apps/v1
kind: Deployment
metadata:
  name: paradigm-api
  namespace: paradigm-mainnet
  labels:
    app.kubernetes.io/name: paradigm-api
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: paradigm-network
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app.kubernetes.io/name: paradigm-api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: paradigm-api
        app.kubernetes.io/component: api
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: paradigm-api
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: paradigm-api
        image: paradigm/api:latest
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: paradigm-secrets
              key: postgres-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: paradigm-secrets
              key: jwt-secret
        - name: API_SECRET
          valueFrom:
            secretKeyRef:
              name: paradigm-secrets
              key: api-secret
        - name: ETHEREUM_RPC_URL
          valueFrom:
            secretKeyRef:
              name: paradigm-secrets
              key: ethereum-rpc-url
        - name: BITCOIN_RPC_URL
          valueFrom:
            secretKeyRef:
              name: paradigm-secrets
              key: bitcoin-rpc-url
        - name: COSMOS_RPC_URL
          valueFrom:
            secretKeyRef:
              name: paradigm-secrets
              key: cosmos-rpc-url
        envFrom:
        - configMapRef:
            name: paradigm-api-config
        resources:
          requests:
            memory: "2Gi"
            cpu: "1"
            ephemeral-storage: "1Gi"
          limits:
            memory: "4Gi"
            cpu: "2"
            ephemeral-storage: "2Gi"
        volumeMounts:
        - name: config
          mountPath: /config
          readOnly: true
        - name: ssl-certs
          mountPath: /etc/ssl/certs
          readOnly: true
        - name: ssl-private
          mountPath: /etc/ssl/private
          readOnly: true
        - name: tmp
          mountPath: /tmp
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            httpHeaders:
            - name: Accept
              value: application/json
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
            httpHeaders:
            - name: Accept
              value: application/json
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 20
      volumes:
      - name: config
        configMap:
          name: paradigm-config
      - name: ssl-certs
        secret:
          secretName: paradigm-tls
          items:
          - key: tls.crt
            path: tls.crt
      - name: ssl-private
        secret:
          secretName: paradigm-tls
          items:
          - key: tls.key
            path: tls.key
          defaultMode: 0600
      - name: tmp
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - paradigm-api
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: paradigm-api
  namespace: paradigm-mainnet
  labels:
    app.kubernetes.io/name: paradigm-api
    app.kubernetes.io/component: api
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app.kubernetes.io/name: paradigm-api

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: paradigm-api
  namespace: paradigm-mainnet
  labels:
    app.kubernetes.io/name: paradigm-api

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: paradigm-mainnet
  name: paradigm-api-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: paradigm-api-rolebinding
  namespace: paradigm-mainnet
subjects:
- kind: ServiceAccount
  name: paradigm-api
  namespace: paradigm-mainnet
roleRef:
  kind: Role
  name: paradigm-api-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: paradigm-api-pdb
  namespace: paradigm-mainnet
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: paradigm-api

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: paradigm-api-hpa
  namespace: paradigm-mainnet
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: paradigm-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: paradigm-api-config
  namespace: paradigm-mainnet
  labels:
    app.kubernetes.io/name: paradigm-api
    app.kubernetes.io/component: config
data:
  API_PORT: "8080"
  API_HOST: "0.0.0.0"
  API_TIMEOUT: "30"
  RATE_LIMIT_REQUESTS_PER_MINUTE: "1000"
  RATE_LIMIT_BURST: "100"
  DATABASE_URL: "postgresql://paradigm:$(POSTGRES_PASSWORD)@postgres:5432/paradigm"
  REDIS_URL: "redis://redis:6379/0"
  DB_POOL_SIZE: "20"
  REDIS_POOL_SIZE: "10"
  PARADIGM_NODE_URL: "http://paradigm-core:8545"
  PARADIGM_WS_URL: "ws://paradigm-core:8546"
  ENABLE_TLS: "true"
  TLS_CERT_PATH: "/etc/ssl/certs/tls.crt"
  TLS_KEY_PATH: "/etc/ssl/private/tls.key"
  CORS_ORIGINS: "https://paradigm.network,https://app.paradigm.network"
  WORKER_THREADS: "4"
  ENABLE_METRICS: "true"
  METRICS_INTERVAL: "15"
  LOG_FORMAT: "json"
  LOG_LEVEL: "info"
  JAEGER_ENDPOINT: "http://jaeger:14268/api/traces"
  PROMETHEUS_ENDPOINT: "http://prometheus:9090"