# NOTE: This file contains template secrets with placeholder values.
# DO NOT commit actual secrets to version control.
# Use kubectl create secret or external secret management tools in production.

apiVersion: v1
kind: Secret
metadata:
  name: paradigm-secrets
  namespace: paradigm-mainnet
  labels:
    app.kubernetes.io/name: paradigm
    app.kubernetes.io/component: secrets
type: Opaque
stringData:
  # Database credentials (replace with actual values)
  postgres-password: "REPLACE_WITH_SECURE_PASSWORD"
  postgres-user: "paradigm"
  postgres-db: "paradigm"
  
  # API secrets (replace with actual values)
  jwt-secret: "REPLACE_WITH_SECURE_JWT_SECRET_AT_LEAST_32_CHARACTERS"
  api-secret: "REPLACE_WITH_SECURE_API_SECRET_AT_LEAST_32_CHARACTERS"
  
  # Cross-chain RPC URLs (replace with actual endpoints)
  ethereum-rpc-url: "https://eth-mainnet.alchemyapi.io/v2/YOUR_API_KEY"
  bitcoin-rpc-url: "https://bitcoin-rpc-node.example.com:8332"
  cosmos-rpc-url: "https://cosmos-rpc.example.com:26657"
  
  # Redis password (if using AUTH)
  redis-password: "REPLACE_WITH_REDIS_PASSWORD"
  
  # SSL/TLS private keys and certificates will be mounted separately
  # These are for additional encryption keys if needed
  encryption-key: "REPLACE_WITH_32_BYTE_HEX_ENCRYPTION_KEY"

---
apiVersion: v1
kind: Secret
metadata:
  name: paradigm-tls
  namespace: paradigm-mainnet
  labels:
    app.kubernetes.io/name: paradigm
    app.kubernetes.io/component: tls
type: kubernetes.io/tls
stringData:
  # Replace with actual certificate and key
  # Generate with: openssl req -x509 -newkey rsa:4096 -keyout tls.key -out tls.crt -days 365 -nodes
  tls.crt: |
    -----BEGIN CERTIFICATE-----
    REPLACE_WITH_ACTUAL_TLS_CERTIFICATE
    -----END CERTIFICATE-----
  tls.key: |
    -----BEGIN PRIVATE KEY-----
    REPLACE_WITH_ACTUAL_TLS_PRIVATE_KEY
    -----END PRIVATE KEY-----

---
apiVersion: v1
kind: Secret
metadata:
  name: paradigm-monitoring-auth
  namespace: paradigm-mainnet
  labels:
    app.kubernetes.io/name: paradigm
    app.kubernetes.io/component: monitoring
type: Opaque
stringData:
  # Basic auth for monitoring endpoints
  # Generate with: htpasswd -c auth admin
  auth: "admin:$2y$10$REPLACE_WITH_BCRYPT_HASH"

---
apiVersion: v1
kind: Secret
metadata:
  name: paradigm-registry-credentials
  namespace: paradigm-mainnet
  labels:
    app.kubernetes.io/name: paradigm
    app.kubernetes.io/component: registry
type: kubernetes.io/dockerconfigjson
stringData:
  .dockerconfigjson: |
    {
      "auths": {
        "registry.paradigm.network": {
          "username": "REPLACE_WITH_REGISTRY_USERNAME",
          "password": "REPLACE_WITH_REGISTRY_PASSWORD",
          "auth": "REPLACE_WITH_BASE64_USERNAME_PASSWORD"
        },
        "docker.io": {
          "username": "REPLACE_WITH_DOCKERHUB_USERNAME", 
          "password": "REPLACE_WITH_DOCKERHUB_TOKEN",
          "auth": "REPLACE_WITH_BASE64_USERNAME_TOKEN"
        }
      }
    }

---
# External Secrets Operator configuration (if using)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: paradigm-vault-store
  namespace: paradigm-mainnet
spec:
  provider:
    vault:
      server: "https://vault.paradigm.network:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "paradigm-secrets-reader"
          serviceAccountRef:
            name: "paradigm-secrets-sa"

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: paradigm-external-secrets
  namespace: paradigm-mainnet
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: paradigm-vault-store
    kind: SecretStore
  target:
    name: paradigm-secrets
    creationPolicy: Owner
  data:
  - secretKey: postgres-password
    remoteRef:
      key: paradigm/database
      property: postgres_password
  - secretKey: jwt-secret
    remoteRef:
      key: paradigm/api
      property: jwt_secret
  - secretKey: api-secret
    remoteRef:
      key: paradigm/api
      property: api_secret
  - secretKey: ethereum-rpc-url
    remoteRef:
      key: paradigm/cross-chain
      property: ethereum_rpc_url
  - secretKey: bitcoin-rpc-url
    remoteRef:
      key: paradigm/cross-chain
      property: bitcoin_rpc_url
  - secretKey: cosmos-rpc-url
    remoteRef:
      key: paradigm/cross-chain
      property: cosmos_rpc_url

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: paradigm-secrets-sa
  namespace: paradigm-mainnet
  labels:
    app.kubernetes.io/name: paradigm
    app.kubernetes.io/component: secrets